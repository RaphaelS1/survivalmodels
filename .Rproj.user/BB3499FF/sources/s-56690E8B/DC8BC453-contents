gen_features = function(n = 1000){
  assert(n > 10)
  m = matrix(c(1.0, 0.5, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
               0.5, 1.0, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
               0.8, 0.8, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
               0.8, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
               0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
               0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
               0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
               0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.4, 0.4,
               0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4, 1.0, 0.2,
               0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4, 0.2, 1.0
  ), nrow = 10, ncol = 10)
  x = data.table(MASS::mvrnorm(n, rep(0, 10), m, empirical = TRUE))

  data.table(
    sexF = Bernoulli$new(0.5)$rand(n),
    age = DiscreteUniform$new(lower = 20, upper = 50)$rand(n),
    trt = Bernoulli$new(0.7)$rand(n),
    x
  )
}
gen_times = function(covs = gen_features(1000),
                     dist = c("weibull", "lnorm", "coxweib", "coxgom", "gomp", "llogis"),
                     sex = 1.5, age = 2, trt = 2, betas = runif(10, -1, 1)) {

  dist = match.arg(dist)
  if (dist == "weibull") {
    scale = (covs$trt + 1) * trt + (covs$sex + 1) * sex
    shape = age * covs$age

    time = rweibull(nrow(covs), shape = shape, scale = scale) +
      (as.matrix(covs[,4:13]) %*% (as.matrix(betas/10)))
  } else if (dist == "lnorm") {
    scale = 1.5
    shape = ((age) + (covs$trt + 0.3) * trt + (covs$sex + 0.3) * sex)

    time = rlnorm(nrow(covs),
                  meanlog = log(shape^2/sqrt(scale + shape^2)),
                  sdlog = sqrt(log(1 + scale/(shape^2)))) +
      (as.matrix(covs[,4:13]) %*% (as.matrix(betas/5)))

  } else if (dist == "coxweib") {
    scale = (covs$trt + 3) * 3 + (covs$sex + 2) * 2
    shape = age * covs$age

    time = as.numeric((-log(runif(nrow(covs))) / (5 * exp(scale + shape)))^(1/20)) +
      (as.matrix(covs[,4:13]) %*% (as.matrix(betas/100)))
  # }
  # else if (dist == "coxgom") {
  #   time = as.numeric(1/3 * log(1 - ((3 * log(runif(nrow(covs)))) /
  #                               (2 * exp((scale*3.5 + shape)/20))))) +
  #     (as.matrix(covs[,4:13]) %*% (as.matrix(betas/100)))
  } else if (dist == "gomp") {
    scale = (covs$trt + 1) * trt + (covs$sex + 1) * sex
    shape = age * covs$age

    time = extraDistr::rgompertz(nrow(covs),
      a =  scale,
      b = shape) +
      (as.matrix(covs[,4:13]) %*% (as.matrix(betas/100)))

  }

  # else if (dist == "llogis") {
  #   time2 = actuar::rllogis(nrow(covs),
  #     shape = shape,
  #     scale = scale) +
  #     (as.matrix(covs[,4:13]) %*% (as.matrix(betas)))
  # }

  time = ((time - min(time))/(max(time)-min(time)) * 29) + 1
  return(time)
}
gen_outcome = function(covs = gen_features(1000), cens_p = 0.2,
                       cens_type = c("I", "min", "ind"), cutoff = NULL, trt = NULL,...) {
  cens_type = match.arg(cens_type)
  surv_times = gen_times(covs, ...)
  if (cens_type == "I") {
    if (is.null(cutoff)) {
      for (i in seq.int(30, 1, -0.5)) {
        if (sum(surv_times > i)/length(surv_times) > cens_p) {
          cutoff = i
          break()
        }
      }
    }
    status = as.integer(surv_times <= cutoff)
    surv_times[surv_times > cutoff] = cutoff
    return(list(times = surv_times, cutoff = cutoff,
                status = status))

  } else if (cens_type == "min") {
    trt = 5
    if (is.null(trt)) {
      cens_times = gen_times(covs, "weibull", sex = 2, age = 2, trt = trt)
      times = apply(cbind(surv_times, cens_times), 1, min)
      status = times == cens_times
      while (sum(status)/length(surv_times) < cens_p  | (sum(status)/length(surv_times) > cens_p + 0.2)) {
        cens_times = gen_times(covs, "weibull", sex = 2, age = 2, trt = trt)
        trt = trt - 0.1
        times = apply(cbind(surv_times, cens_times), 1, min)
        status = times == cens_times
      }
    } else {
      cens_times = gen_times(covs, "weibull", sex = 2, age = 2, trt = trt)
      times = apply(cbind(surv_times, cens_times), 1, min)
      status = times == cens_times
    }
    return(list(times = times, trt = trt,
                status = 1 - as.integer(status)))
  } else {
    return(list(times = surv_times, status = rbinom(length(surv_times), 1, 1 - cens_p)))
  }
}

load_SimTypeI = function(dist, cens_p, n, seed) {
  set.seed(seed)

  betas = runif(10, -2, 2)
  train_covs = gen_features(n)
  train_outcome = gen_outcome(covs = train_covs,
                              cens_p = cens_p,
                              cens_type = "I",
                              betas = betas,
                              dist = dist)

  data.frame(train_covs, time = train_outcome$times, status = train_outcome$status)
}
load_SimRand = function(dist, cens_p, n, seed) {
  set.seed(seed)

  betas = runif(10, -2, 2)
  train_covs = gen_features(n)
  train_outcome = gen_outcome(covs = train_covs,
                              cens_p = cens_p,
                              cens_type = "min",
                              betas = betas,
                              dist = dist)
  data.frame(train_covs, time = train_outcome$times, status = train_outcome$status)
}
load_SimInd = function(dist, cens_p, n, seed) {
  set.seed(seed)

  betas = runif(10, -2, 2)
  train_covs = gen_features(n)
  train_outcome = gen_outcome(covs = train_covs,
                              cens_p = cens_p,
                              cens_type = "ind",
                              betas = betas,
                              dist = dist)
  data.frame(train_covs, time = train_outcome$times, status = train_outcome$status)
}

load_Sim1 = function(n, seed) {
  load_SimTypeI("coxweib", 0.2, n, seed)
}
# load_Sim2 = function(n, seed) {
#   load_SimTypeI("coxgom", 0.2, n, seed)
# }
load_Sim2 = function(n, seed) {
  load_SimTypeI("weibull", 0.2, n, seed)
}
load_Sim3 = function(n, seed) {
  load_SimTypeI("gomp", 0.2, n, seed)
}
load_Sim4 = function(n, seed) {
  load_SimTypeI("lnorm", 0.2, n, seed)
}
# load_Sim6 = function(n, seed) {
#   load_SimTypeI("llogis", 0.2, n, seed)
# }

load_Sim5 = function(n, seed) {
  load_SimRand("coxweib", 0.2, n, seed)
}
# load_Sim8 = function(n, seed) {
#   load_SimRand("coxgom", 0.2, n, seed)
# }
load_Sim6 = function(n, seed) {
  load_SimRand("weibull", 0.2, n, seed)
}
load_Sim7 = function(n, seed) {
  load_SimRand("gomp", 0.2, n, seed)
}
load_Sim8 = function(n, seed) {
  load_SimRand("lnorm", 0.2, n, seed)
}
# load_Sim12 = function(n, seed) {
#   load_SimRand("llogis", 0.2, n, seed)
# }

load_Sim9 = function(n, seed) {
  load_SimInd("coxweib", 0.2, n, seed)
}
# load_Sim14 = function(n, seed) {
#   load_SimInd("coxgom", 0.2, n, seed)
# }
load_Sim10 = function(n, seed) {
  load_SimInd("weibull", 0.2, n, seed)
}
load_Sim11 = function(n, seed) {
  load_SimInd("gomp", 0.2, n, seed)
}
load_Sim12 = function(n, seed) {
  load_SimInd("lnorm", 0.2, n, seed)
}
# load_Sim18 = function(n, seed) {
#   load_SimInd("llogis", 0.2, n, seed)
# }

load_Sim13 = function(n, seed) {
  load_SimTypeI("coxweib", 0.5, n, seed)
}
# load_Sim20 = function(n, seed) {
#   load_SimTypeI("coxgom", 0.5, n, seed)
# }
load_Sim14 = function(n, seed) {
  load_SimTypeI("weibull", 0.5, n, seed)
}
load_Sim15 = function(n, seed) {
  load_SimTypeI("gomp", 0.5, n, seed)
}
load_Sim16 = function(n, seed) {
  load_SimTypeI("lnorm", 0.5, n, seed)
}
# load_Sim24 = function(n, seed) {
#   load_SimTypeI("llogis", 0.5, n, seed)
# }

load_Sim17 = function(n, seed) {
  load_SimRand("coxweib", 0.5, n, seed)
}
# load_Sim26 = function(n, seed) {
#   load_SimRand("coxgom", 0.5, n, seed)
# }
load_Sim18 = function(n, seed) {
  load_SimRand("weibull", 0.5, n, seed)
}
load_Sim19 = function(n, seed) {
  load_SimRand("gomp", 0.5, n, seed)
}
load_Sim20 = function(n, seed) {
  load_SimRand("lnorm", 0.5, n, seed)
}
# load_Sim30 = function(n, seed) {
#   load_SimRand("llogis", 0.5, n, seed)
# }

load_Sim21 = function(n, seed) {
  load_SimInd("coxweib", 0.5, n, seed)
}
# load_Sim32 = function(n, seed) {
#   load_SimInd("coxgom", 0.5, n, seed)
# }
load_Sim22 = function(n, seed) {
  load_SimInd("weibull", 0.5, n, seed)
}
load_Sim23 = function(n, seed) {
  load_SimInd("gomp", 0.5, n, seed)
}
load_Sim24 = function(n, seed) {
  load_SimInd("lnorm", 0.5, n, seed)
}
# load_Sim36 = function(n, seed) {
#   load_SimInd("llogis", 0.5, n, seed)
# }

load_Sim25 = function(n, seed) {
  load_SimTypeI("coxweib", 0.8, n, seed)
}
# load_Sim38 = function(n, seed) {
#   load_SimTypeI("coxgom", 0.8, n, seed)
# }
load_Sim26 = function(n, seed) {
  load_SimTypeI("weibull", 0.8, n, seed)
}
load_Sim27 = function(n, seed) {
  load_SimTypeI("gomp", 0.8, n, seed)
}
load_Sim28 = function(n, seed) {
  load_SimTypeI("lnorm", 0.8, n, seed)
}
# load_Sim42 = function(n, seed) {
#   load_SimTypeI("llogis", 0.8, n, seed)
# }

load_Sim29 = function(n, seed) {
  load_SimRand("coxweib", 0.8, n, seed)
}
# load_Sim44 = function(n, seed) {
#   load_SimRand("coxgom", 0.8, n, seed)
# }
load_Sim30 = function(n, seed) {
  load_SimRand("weibull", 0.8, n, seed)
}
load_Sim31 = function(n, seed) {
  load_SimRand("gomp", 0.8, n, seed)
}
load_Sim32 = function(n, seed) {
  load_SimRand("lnorm", 0.8, n, seed)
}
# load_Sim48 = function(n, seed) {
#   load_SimRand("llogis", 0.8, n, seed)
#

load_Sim33 = function(n, seed) {
  load_SimInd("coxweib", 0.8, n, seed)
}
# load_Sim50 = function(n, seed) {
#   load_SimInd("coxgom", 0.8, n, seed)
# }
load_Sim34 = function(n, seed) {
  load_SimInd("weibull", 0.8, n, seed)
}
load_Sim35 = function(n, seed) {
  load_SimInd("gomp", 0.8, n, seed)
}
load_Sim36 = function(n, seed) {
  load_SimInd("lnorm", 0.8, n, seed)
}
# load_Sim54 = function(n, seed) {
#   load_SimInd("llogis", 0.8, n, seed)
# }
