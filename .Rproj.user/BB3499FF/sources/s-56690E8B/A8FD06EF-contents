library(survival)
source("gen_simulated_data.R")
test_sim = function(i, p_cens, ...) {

  data = do.call(paste0("load_Sim", i), list(n = 2000, seed = i * 3000))

  ret = list()

  ret$lm_time = summary(lm(time ~ .-status, data = data))

  ret$status = chisq.test(data$status, rbinom(2000, 1, p_cens/100))

  ret$ph = cox.zph(coxph(Surv(time, status) ~ ., data = data))

  ret$typei = length(unique(data$time[data$status == 0])) == 1

  ret$glm_status = summary(glm(status ~ .-time, data = data, family = "binomial"))

  return(ret)
}

# Type I; 20% informative censoring; 1st is PH
test_sim(1, 20, TRUE, TRUE, TRUE)
test_sim(2, 20, TRUE, TRUE, FALSE)
test_sim(3, 20, TRUE, TRUE, FALSE)
test_sim(4, 20, TRUE, TRUE, FALSE)

# Random 20% informative censoring; 1st is PH
test_sim(5, 20, TRUE, FALSE, TRUE)
test_sim(6, 20, TRUE, FALSE, FALSE)
test_sim(7, 20, TRUE, FALSE, FALSE)
test_sim(8, 20, TRUE, FALSE, FALSE)

# 20% uninformative censoring; 1st is PH
test_sim(9, 20, FALSE, FALSE, TRUE)
test_sim(10, 20, FALSE, FALSE, FALSE)
test_sim(11, 20, FALSE, FALSE, FALSE)
test_sim(12, 20, FALSE, FALSE, FALSE)

# Type I; 50% informative censoring; 1st is PH
test_sim(13, 50, TRUE, TRUE, TRUE)
test_sim(14, 50, TRUE, TRUE, FALSE)
test_sim(15, 50, TRUE, TRUE, FALSE)
test_sim(16, 50, TRUE, TRUE, FALSE)

# Random 50% informative censoring; 1st is PH
test_sim(17, 50, TRUE, FALSE, TRUE)
test_sim(18, 50, TRUE, FALSE, FALSE)
test_sim(19, 50, TRUE, FALSE, FALSE)
test_sim(20, 50, TRUE, FALSE, FALSE)

# 50% uninformative censoring; 1st is PH
test_sim(21, 50, FALSE, FALSE, TRUE)
test_sim(22, 50, FALSE, FALSE, FALSE)
test_sim(23, 50, FALSE, FALSE, FALSE)
test_sim(24, 50, FALSE, FALSE, FALSE)

# Type I; 80% informative censoring; 1st is PH
test_sim(13, 80, TRUE, TRUE, TRUE)
test_sim(14, 80, TRUE, TRUE, FALSE)
test_sim(15, 80, TRUE, TRUE, FALSE)
test_sim(16, 80, TRUE, TRUE, FALSE)

# Random 80% informative censoring; 1st is PH
test_sim(17, 80, TRUE, FALSE, TRUE)
test_sim(18, 80, TRUE, FALSE, FALSE)
test_sim(19, 80, TRUE, FALSE, FALSE)
test_sim(20, 80, TRUE, FALSE, FALSE)

# 80% uninformative censoring; 1st is PH
test_sim(21, 80, FALSE, FALSE, TRUE)
test_sim(22, 80, FALSE, FALSE, FALSE)
test_sim(23, 80, FALSE, FALSE, FALSE)
test_sim(24, 80, FALSE, FALSE, FALSE)
